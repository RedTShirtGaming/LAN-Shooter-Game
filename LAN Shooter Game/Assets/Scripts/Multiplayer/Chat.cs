using UnityEngine;
using UnityEngine.UIElements;
using System.Collections.Generic;
using Unity.Netcode;
using QFSW.QC;

/*
 * Message sending.
 * 
 * Generated by ChatGPT.
 */

[CommandPrefix("message.")]
public class Chat : MonoBehaviour
{
    [Command("message-validation", "Whether language filtering is enabled.")] public bool shouldValidateMessages = true;
    public List<string> blockedWords = new List<string> { "badword1", "badword2" };

    [ServerRpc]
    public void SendMessageServerRpc(string msg, ServerRpcParams rpcParams = default)
    {
        string validatedMsg = msg;

        if (shouldValidateMessages)
        {
            validatedMsg = ValidateMessage(msg);
        }

        Debug.Log(validatedMsg);

        // Broadcast the message to all clients
        ServerSendMessageClientRpc(validatedMsg, rpcParams.Receive.SenderClientId);
    }

    [ClientRpc]
    public void ServerSendMessageClientRpc(string msg, ulong clientId)
    {
        Debug.Log(msg);

        // Handle the received message on the client side
        // e.g., update the chat UI, display the message, etc.
    }

    string ValidateMessage(string msg)
    {
        string validatedString = msg;

        foreach (string blockedWord in blockedWords)
        {
            if (msg.Contains(blockedWord))
            {
                string asterisks = new string('*', blockedWord.Length);
                validatedString = validatedString.Replace(blockedWord, asterisks);
            }
        }

        // Add automatic translation logic here if desired

        return validatedString;
    }


    [Command("send", "Sends a message. Put message in \"\" before sending.")]
    public void Send(string msg)
    {
        SendMessageServerRpc(msg);
    }
}
